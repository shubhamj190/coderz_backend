# accounts/tasks.py
import csv
from io import StringIO
from datetime import datetime
from celery import shared_task
from django.db import transaction
from django.forms import ValidationError
from apps.accounts.models.user import GroupMaster, Location, UserDetails, User, UserGroup
from apps.accounts.models.grades import Grade, Division
from apps.accounts.utils import user_name_creator

@shared_task
def process_bulk_upload_students(csv_data):
    """
    Process CSV data to bulk create/update student users.
    Expects a CSV string with the following headers:
    Name,Last Name,Gender,DOB,E-Mail,Grade,Division,Admission No.,Active Status,Profile Pic
    """
    reader = csv.DictReader(StringIO(csv_data))
    success_count = 0
    errors = []
    for row_num, row in enumerate(reader, start=1):
        try:
            first_name = row.get("Name", "").strip()
            last_name = row.get("Last Name", "").strip()
            gender = row.get("Gender", "").lower().strip()
            dob_str = row.get("DOB", "").strip()
            email = row.get("E-Mail", "").strip()
            grade_name = row.get("Grade", "").strip()
            group_name = row.get("Division", "").strip()  # Using group name instead of direct Division
            admission_no = row.get("Admission No.", "").strip()
            active_str = row.get("Active Status", "True").strip()
            profile_pic = row.get("Profile Pic", None)  # Optional profile picture
            is_active = active_str.lower() in ["true", "1", "yes", "y"]

            # Validate required fields
            if not email:
                raise ValidationError("Missing E-Mail.")
            if not first_name or not last_name:
                raise ValidationError("Missing Name/Last Name.")

            try:
                date_of_birth = datetime.strptime(dob_str, "%Y-%m-%d").date()
            except ValueError:
                raise ValidationError(f"Invalid DOB format '{dob_str}'. Expected YYYY-MM-DD.")

            # Get or create Grade
            grade_obj, _ = Grade.objects.get_or_create(GradeName=grade_name)
            # Fetch GroupMaster using GroupName
            group_master = GroupMaster.objects.filter(GroupName=f"{grade_name} - {group_name}").first()
            if not group_master:
                raise ValidationError(f"Group '{group_name}' not found in GroupMaster.")

            # Fetch Division using GroupMaster
            division_obj = Division.objects.filter(DivisionName=group_name).first()
            if not division_obj:
                raise ValidationError(f"No Division found for Group '{group_name}'.")

            with transaction.atomic():
                if User.objects.filter(Email=email).exists():
                    raise ValidationError("A user with this email already exists.")

                # Create User
                user = User.objects.create_user(
                    UserName=None,  # auto-generated by the custom manager
                    Email=email,
                    InstitutionId=1,
                    password="student@123"
                )

                # Create Student record
                student = UserDetails.objects.create(
                    user=user,
                    FirstName=first_name,
                    LastName=last_name,
                    Gender=gender,
                    date_of_birth=date_of_birth,
                    GradeId=grade_obj.GradeId,  # Ensure string assignment
                    AdmissionNo=admission_no,
                    UserType='Learner',
                    IsActive=is_active,
                    profile_pic=profile_pic,
                )
                # Assign user to UserGroup
                UserGroup.objects.create(
                    user=user.UserId,
                    GroupId=group_master.GroupId,
                    LocationId=2,
                    LID=Location.objects.get(LID=2),
                    GID=GroupMaster.objects.get(GroupId=group_master.GroupId),
                )

                # Set username for new users
                if user:
                    user.UserName = user_name_creator('Learner', user)
                    user.save()

                success_count += 1
        except Exception as e:
            errors.append(f"Row {row_num}: {str(e)}")

    return {"success_count": success_count, "errors": errors}

